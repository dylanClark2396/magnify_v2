AWSTemplateFormatVersion: 2010-09-09
Description: api

Resources:
  ### Lambda Execution Role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-httpapi-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: arn:aws:dynamodb:us-east-1:943114872394:table/InspectionFormData

  ### Lambda Function ###
  MainApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mainapi-function
      Runtime: nodejs20.x
      Handler: dist/index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub lambdas-bucket-${AWS::AccountId}
        S3Key: api-lambda/main.zip
      Timeout: 10

  ### HTTP API Gateway ###
  MainApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MainApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - PUT
          - DELETE
        AllowHeaders:
          - '*'

  ### Lambda Integration ###
  MainApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MainApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt MainApiFunction.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'

  MainApiDocRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MainApi
      RouteKey: "POST /doc"
      Target: !Sub integrations/${MainApiIntegration}

  MainApiDocsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MainApi
      RouteKey: "GET /docs"
      Target: !Sub integrations/${MainApiIntegration}

  ### Stage ###
  MainApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MainApi
      StageName: $default
      AutoDeploy: true

  ### Lambda Permission for API Gateway ###
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MainApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MainApi}/*/*
